name: Publish celery app
on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Create SSH directory
        run: mkdir -p ~/.ssh/
      
      - name: Store PEM key
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PEM_KEY }}
        run: |
          echo "$PRIVATE_KEY" > ~/.ssh/key.pem
          chmod 600 ~/.ssh/key.pem

      - name: Add EC2 to known hosts
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
      
      - name: Upload file to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          scp -i ~/.ssh/key.pem -r ./* $EC2_USER@$EC2_HOST:/home/$EC2_USER/app/
      
      - name: Install requirements
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -i ~/.ssh/key.pem $EC2_USER@$EC2_HOST "cd /home/$EC2_USER/app/ && mv env.prod .env"
          ssh -i ~/.ssh/key.pem $EC2_USER@$EC2_HOST "cd /home/$EC2_USER/app/ && source venv/bin/activate && pip install -r requirements.txt"

      - name: Check Chromadb health
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -i ~/.ssh/key.pem $EC2_USER@$EC2_HOST "cd /home/$EC2_USER/app/ && source venv/bin/activate && python health_check.py"

      - name: Restart celery
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -i ~/.ssh/key.pem $EC2_USER@$EC2_HOST "cd /home/$EC2_USER/app/ && source venv/bin/activate && sudo systemctl restart celery"
